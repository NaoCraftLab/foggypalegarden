plugins {
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${modId}.mixins.json"
    }
}

configurations {
    common
    versionSpecificCommon

    shadowCommon
    shadowVersionSpecificCommon

    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentForge.extendsFrom(common, versionSpecificCommon)
}

dependencies {
    forge "net.minecraftforge:forge:${forgeVersion}"

    common(project(path: ':core', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':core', configuration: 'transformProductionForge')) { transitive false }

    versionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'transformProductionForge')) { transitive false }

    versionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'transformProductionForge')) { transitive false }

    if (forgeClothConfigEnabled.toBoolean() && !commonClothConfigVersion.isEmpty()) {
        modImplementation("me.shedaniel.cloth:cloth-config-forge:${commonClothConfigVersion}")
        versionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'namedElements')) { transitive false }
        shadowVersionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'transformProductionForge')) { transitive false }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def dependencies = new ArrayList<>()

    def coreSources = project(':core').sourcesJar
    dependencies.add(coreSources)
    from coreSources.archiveFile.map { zipTree(it) }

    def commandSources = project(":command-$moduleCommand").sourcesJar
    dependencies.add(commandSources)
    from commandSources.archiveFile.map { zipTree(it) }

    def mixinSources = project(":mixin-$moduleMixin").sourcesJar
    dependencies.add(mixinSources)
    from mixinSources.archiveFile.map { zipTree(it) }

    if (forgeClothConfigEnabled && !commonClothConfigVersion.isEmpty()) {
        def clothConfigSources = project(":cloth-config-$moduleClothConfig").sourcesJar
        dependencies.add(clothConfigSources)
        from clothConfigSources.archiveFile.map { zipTree(it) }
    }

    dependsOn dependencies
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

configurations.configureEach {
    resolutionStrategy.force("net.sf.jopt-simple:jopt-simple:${forgeJoptSimpleVersion}")
}

unifiedPublishing {
    project {
        changelog = rootProject.getChangelogForVersion(project.modVersion)
        gameLoaders = ["forge"]
        if (project.minecraftVersion.equals("1.20.1")) {
            gameLoaders.add "neoforge"
        }

        relations {
            if (project.forgeClothConfigEnabled.toBoolean()) {
                optional {
                    modrinth = "cloth-config"
                    curseforge = "cloth-config"
                }
            }
            if (project.forgeBetterModListEnabled.toBoolean()) {
                optional {
                    modrinth = "better-modlist"
                    curseforge = "better-modlist-neoforge"
                }
            }
        }

        mainPublication remapJar
        secondaryPublication sourcesJar.archiveFile

        def modrinthToken = project.findProperty("modrinthToken")?.toString() ?: System.getenv("MODRINTH_TOKEN")
        if (modrinthToken != null && !modrinthToken.isBlank()) {
            modrinth {
                token = modrinthToken
                id = project.modModrinthId
                gameVersions = project.modModrinthGameVersions.split(',').toList()
            }
        }

        def curseForgeApiKey = project.findProperty("curseforgeApiKey")?.toString() ?: System.getenv("CURSEFORGE_API_KEY")
        if (curseForgeApiKey != null && !curseForgeApiKey.isBlank()) {
            curseforge {
                token = curseForgeApiKey
                id = project.modCurseForgeId
                gameVersions = project.modCurseForgeGameVersions.split(',').toList()
                gameVersions.addAll "Java $project.minecraftJavaVersion"
            }
        }
    }
}
