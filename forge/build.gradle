architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${modId}.mixins.json"
    }
}

configurations {
    common
    versionSpecificCommon
    shadowCommon
    shadowVersionSpecificCommon
    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentForge.extendsFrom(common, versionSpecificCommon)
}

dependencies {
    forge "net.minecraftforge:forge:${forgeVersion}"

    modImplementation "me.shedaniel.cloth:cloth-config-forge:${commonClothConfigVersion}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')) { transitive false }
    versionSpecificCommon(project(path: ":mixin:$moduleMixin", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":mixin:$moduleMixin", configuration: 'transformProductionForge')) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    def versionSpecificSources = project(":mixin:$moduleMixin").sourcesJar
    dependsOn commonSources, versionSpecificSources
    from commonSources.archiveFile.map { zipTree(it) }
    from versionSpecificSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

configurations.configureEach {
    resolutionStrategy.force("net.sf.jopt-simple:jopt-simple:${forgeJoptSimpleVersion}")
}
