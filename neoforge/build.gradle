architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.ext.neoforgeVersion}"

    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:${project.ext.commonClothConfigVersion}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionNeoForge')) { transitive false }

    common(project(path: "${commonMixinImplementation}", configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: "${commonMixinImplementation}", configuration: 'transformProductionFabric')) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    def mixinSources = project("${commonMixinImplementation}").sourcesJar
    dependsOn mixinSources
    from mixinSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}