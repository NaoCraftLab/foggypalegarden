architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    versionSpecificCommon
    shadowCommon
    shadowVersionSpecificCommon
    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentNeoForge.extendsFrom(common, versionSpecificCommon)
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.ext.neoforgeVersion}"

    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:${project.ext.commonClothConfigVersion}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionNeoForge')) { transitive false }
    versionSpecificCommon(project(path: ":mixin:$moduleMixin", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":mixin:$moduleMixin", configuration: 'transformProductionNeoForge')) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    def versionSpecificSources = project(":mixin:$moduleMixin").sourcesJar
    dependsOn commonSources, versionSpecificSources
    from commonSources.archiveFile.map { zipTree(it) }
    from versionSpecificSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
