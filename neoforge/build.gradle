architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    versionSpecificCommon

    shadowCommon
    shadowVersionSpecificCommon

    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentNeoForge.extendsFrom(common, versionSpecificCommon)
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.ext.neoforgeVersion}"

    common(project(path: ':core', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':core', configuration: 'transformProductionNeoForge')) { transitive false }

    versionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'transformProductionNeoForge')) { transitive false }

    versionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'transformProductionNeoForge')) { transitive false }

    if (neoforgeClothConfigEnabled.toBoolean() && !commonClothConfigVersion.isEmpty()) {
        modImplementation("me.shedaniel.cloth:cloth-config-neoforge:${commonClothConfigVersion}")
        versionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'namedElements')) { transitive false }
        shadowVersionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'transformProductionNeoForge')) { transitive false }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def dependencies = new ArrayList<>()

    def coreSources = project(':core').sourcesJar
    dependencies.add(coreSources)
    from coreSources.archiveFile.map { zipTree(it) }

    def commandSources = project(":command-$moduleCommand").sourcesJar
    dependencies.add(commandSources)
    from commandSources.archiveFile.map { zipTree(it) }

    def mixinSources = project(":mixin-$moduleMixin").sourcesJar
    dependencies.add(mixinSources)
    from mixinSources.archiveFile.map { zipTree(it) }

    if (neoforgeClothConfigEnabled.toBoolean() && !commonClothConfigVersion.isEmpty()) {
        def clothConfigSources = project(":cloth-config-$moduleClothConfig").sourcesJar
        dependencies.add(clothConfigSources)
        from clothConfigSources.archiveFile.map { zipTree(it) }
    }

    dependsOn dependencies
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
