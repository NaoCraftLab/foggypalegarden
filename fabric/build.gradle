plugins {
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    versionSpecificCommon

    shadowCommon
    shadowVersionSpecificCommon

    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentFabric.extendsFrom(common, versionSpecificCommon)
}

loom {
    accessWidenerPath = project(":core").loom.accessWidenerPath
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${commonFabricLoaderVersion}"
    modApi("net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}") {
        exclude(module: 'fabric-api-deprecated')
    }

    common(project(path: ':core', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':core', configuration: 'transformProductionFabric')) { transitive false }

    versionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":command-$moduleCommand", configuration: 'transformProductionFabric')) { transitive false }

    versionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":mixin-$moduleMixin", configuration: 'transformProductionFabric')) { transitive false }

    if (fabricClothConfigEnabled.toBoolean() && !commonClothConfigVersion.isEmpty()) {
        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${commonClothConfigVersion}") {
            exclude(group: 'net.fabricmc.fabric-api')
        }
        versionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'namedElements')) { transitive false }
        shadowVersionSpecificCommon(project(path: ":cloth-config-$moduleClothConfig", configuration: 'transformProductionFabric')) { transitive false }

        if (!commonModMenuVersion.isEmpty()) {
            modImplementation("com.terraformersmc:modmenu:$commonModMenuVersion") {
                exclude(group: 'net.fabricmc.fabric-api')
            }
            versionSpecificCommon(project(path: ":modmenu-$moduleModMenu", configuration: 'namedElements')) { transitive false }
            shadowVersionSpecificCommon(project(path: ":modmenu-$moduleModMenu", configuration: 'transformProductionFabric')) { transitive false }
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def dependencies = new ArrayList<>()

    def coreSources = project(':core').sourcesJar
    dependencies.add(coreSources)
    from coreSources.archiveFile.map { zipTree(it) }

    def commandSources = project(":command-$moduleCommand").sourcesJar
    dependencies.add(commandSources)
    from commandSources.archiveFile.map { zipTree(it) }

    def mixinSources = project(":mixin-$moduleMixin").sourcesJar
    dependencies.add(mixinSources)
    from mixinSources.archiveFile.map { zipTree(it) }

    if (fabricClothConfigEnabled.toBoolean() && !commonClothConfigVersion.isEmpty()) {
        def clothConfigSources = project(":cloth-config-$moduleClothConfig").sourcesJar
        dependencies.add(clothConfigSources)
        from clothConfigSources.archiveFile.map { zipTree(it) }

        if (!commonModMenuVersion.isEmpty()) {
            def modMenuSources = project(":modmenu-$moduleModMenu").sourcesJar
            dependencies.add(modMenuSources)
            from modMenuSources.archiveFile.map { zipTree(it) }
        }
    }

    dependsOn dependencies
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        changelog = rootProject.getChangelogForVersion(project.modVersion)
        gameLoaders = ["fabric", "quilt"]

        relations {
            depends {
                modrinth = "fabric-api"
                curseforge = "fabric-api"
            }
            if (project.fabricClothConfigEnabled.toBoolean()) {
                optional {
                    modrinth = "cloth-config"
                    curseforge = "cloth-config"
                }
            }
            if (project.fabricModMenuEnabled.toBoolean()) {
                optional {
                    modrinth = "modmenu"
                    curseforge = "modmenu"
                }
            }
        }

        mainPublication remapJar
        secondaryPublication sourcesJar.archiveFile

        def modrinthToken = project.findProperty("modrinthToken")?.toString() ?: System.getenv("MODRINTH_TOKEN")
        if (modrinthToken != null && !modrinthToken.isBlank()) {
            modrinth {
                token = modrinthToken
                id = project.modModrinthId
                gameVersions = project.modModrinthGameVersions.split(',').toList()
            }
        }

        def curseForgeApiKey = project.findProperty("curseforgeApiKey")?.toString() ?: System.getenv("CURSEFORGE_API_KEY")
        if (curseForgeApiKey != null && !curseForgeApiKey.isBlank()) {
            curseforge {
                token = curseForgeApiKey
                id = project.modCurseForgeId
                gameVersions = project.modCurseForgeGameVersions.split(',').toList()
                gameVersions.addAll "Java $project.minecraftJavaVersion"
            }
        }
    }
}
