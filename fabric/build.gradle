architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${commonFabricLoaderVersion}"
    modApi("net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}") {
        exclude(module: 'fabric-api-deprecated')
    }

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${commonClothConfigVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    modImplementation("com.terraformersmc:modmenu:${fabricModMenuVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) { transitive false }

    common(project(path: "${commonMixinImplementation}", configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: "${commonMixinImplementation}", configuration: 'transformProductionFabric')) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    def mixinSources = project("${commonMixinImplementation}").sourcesJar
    dependsOn mixinSources
    from mixinSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
