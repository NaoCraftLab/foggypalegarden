architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    versionSpecificCommon
    shadowCommon
    shadowVersionSpecificCommon
    compileClasspath.extendsFrom(common, versionSpecificCommon)
    runtimeClasspath.extendsFrom(common, versionSpecificCommon)
    developmentFabric.extendsFrom(common, versionSpecificCommon)
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${commonFabricLoaderVersion}"
    modApi("net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}") {
        exclude(module: 'fabric-api-deprecated')
    }

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${commonClothConfigVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    modImplementation("com.terraformersmc:modmenu:${fabricModMenuVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) { transitive false }
    versionSpecificCommon(project(path: ":${specific}", configuration: 'namedElements')) { transitive false }
    shadowVersionSpecificCommon(project(path: ":${specific}", configuration: 'transformProductionFabric')) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowVersionSpecificCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    def versionSpecificSources = project(":$specific").sourcesJar
    dependsOn commonSources, versionSpecificSources
    from commonSources.archiveFile.map { zipTree(it) }
    from versionSpecificSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
